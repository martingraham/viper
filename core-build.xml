<?xml version="1.0" encoding="UTF-8"?>

<project name="core" default="compile" basedir="." 
	xmlns:ivy="antlib:org.apache.ivy.ant" 
	xmlns:doxygen="antlib:org.doxygen.tools">

<!-- convention-based folder locations -->	
<property name="build" location="build"/>
<property name="src" location="src"/>
<property name="docs" location="docs"/>
<property name="distrib" location="distrib"/>
<property name="lib" location="lib"/>
	
<!-- compiler properties -->	
<property name="classVersion" value="1.6"/>
<property name="verbosity" value="false"/>
<property name="debugClassFiles" value="on"/>
	
<!-- javac properties -->	
<property name="myjvmargs" value=""/>	
	
<!-- project properties -->
<property name="version" value="1.0"/>
	
<!-- jar file construction properties -->	
<property name="jarCompress" value="false"/>
<property name="manifestClassPath" value="."/>	
	
<!-- jar signing properties in separate property file -->	
<property file="jarsign.properties"/>

<available file="${jarsign.keystore}" property="keystoreExists" />
<available file="${lib}" property="libExists"/>
<available file="${distData}" property="distDataExists"/>
	
<!-- jnlp construction properties - requires ant-contrib orangevolt task library -->	
<property name="jnlpFilename" value="${ant.project.name}.jnlp"/>	
<property name="jnlpCodebase" value="http://www.dcs.napier.ac.uk/~marting/Pedigree"/>
<property name="jnlpApplet" value="false"/>	
<property name="jnlpAppletClass" value="napier.pedigree.Test"/>
<property name="jnlpOneLineDescription" value="Pedigree Viewer"/>
<property name="jnlpVendor" value="CISS Group, Napier University &amp; Roslin, Edinburgh University"/>
	

<!-- lib folder files as a convenience fileset -->
<fileset id="libjars" dir="${lib}">
	<include name="*.jar" />
</fileset>
	
	
<!-- ivy stuff -->
<property name="fromResolver" value="remoteResolvers" /> 
<property name="toResolver" value="local_repo" /> 

	
	
	
	
<!-- make build and lib files if they don't exist -->
<target name="init" description="-->  make ${build} and ${lib} files if they don't exist">
	<mkdir dir="${build}"/>
	<mkdir dir="${lib}"/>
</target>
	

<!-- compile/copy src folder files to build folder -->
<target name="compile" depends="init" description="--> compile/copy ${src} folder files to ${build} folder">

	<echo message="java: ${java.home}"/>

	<javac srcdir="${src}" destdir="${build}" debug="${debugClassFiles}" deprecation="on" verbose="${verbosity}" target="${classVersion}">
		<!-- <compilerarg value="-Xlint"/> -->
		<classpath>
		      <pathelement path="${classpath}"/>
			  <pathelement location="${java.home}/lib/javaws.jar"/>
			  <fileset refid="libjars"/>
		</classpath>
	</javac>

	<copy todir="${build}">
		<fileset dir="${src}">
				<include name="img/*.*"/>
				<include name="**/*.css"/>
				<include name="**/*.html"/>
				<!-- <include name="*.properties"/> -->
				<include name="**/*.properties"/>
				<include name="*.txt"/>
		</fileset>
	</copy>

</target>


<!-- run compiled files in build folder -->
<target name="run" depends="compile" description="--> run compiled files in ${build} folder">
	<echo>jvmargs: [${myjvmargs}]</echo>
    <java classname="${defaultMainClass}" maxmemory="384m" fork="true" failonerror="true">
    	<jvmarg value="${myjvmargs}"/>
    	<classpath>
            <pathelement path="${build}"/>
        	<fileset refid="libjars"/>
        </classpath>
    </java>
</target>
	
	
<!-- run compiled files with Xshare arg allowing VisualVM to monitor app -->
<target name="runProfiler" depends="compile" description="--> run compiled files with -Xshare arg allowing VisualVM to monitor app">
	<antcall target="run">
		<param name="myjvmargs" value="-Xshare:off"/>
	</antcall>
</target>



<!-- construct basic jar file in distrib folder from compiled files in build folder -->	
<target name="jarBasic" depends="compile" description="--> construct basic jar file in ${distrib} folder from compiled files in ${build} folder">
	<mkdir dir="${distrib}"/>
	
	<echo message="jarCompress: [${jarCompress}]"/>
	<jar destfile="${distrib}/${jarFileName}.jar" basedir="${build}" compress="${jarCompress}"
		excludes="runOutput.txt">

		<exclude name="**/Thumbs.db"/>
		<exclude name="**/test/*.*"/>

		<manifest>
			<attribute name="Main-Class" value="${defaultMainClass}" />
			<attribute name="Class-Path" value="${manifestClassPath}" />
		</manifest>
	</jar>

	<copy todir="${distrib}">
		<fileset refid="libjars"/>
	</copy>
</target>
	

<!-- as above but include lib folder jars as class path in jar manifest -->
<!-- this is needed for one click jar files, PortableJava and java -jar whatever.jar launching -->	
<target name="jarBasicWithLibClasspath" description="--> as jarBasic but include ${lib} folder jars as class path in jar manifest">
	<path id="libPath"><fileset refid="libjars"/></path>
	<pathconvert property="libList" refid="libPath" pathsep=" " dirsep="/">
		<map from="${lib}/" to="" />
	</pathconvert>
	
	<antcall target="jarBasic">
		<param name="manifestClassPath" value=". ${libList}"/>
	</antcall>
</target>


<!-- include some data files in jar if wanted -->
<target name="jarData" if="distDataExists" description="--> include some data files in jar if wanted">
	<property name="reldatasetpath" location="./${dataset}"/>
	<echo message="[${reldatasetpath}]"/>
	<jar destfile="${distrib}/${jarFileName}.jar" basedir="${reldatasetpath}" compress="$(jarCompress)" update="true"/>
</target>


<!-- basic jar file including data if wanted -->
<target name="jar" depends="jarBasicWithLibClasspath,jarData" description="--> basic jar file including data if wanted"/>



<!-- make a signing key (properties declared in a separate property file) -->
<target name="makekey" unless="keystoreExists" description="--> make a signing key (properties declared in a separate property file)">
	<echo>in makekey...</echo>
	<genkey alias="${jarsign.alias}" storepass="${jarsign.keystorePassword}" keystore="${jarsign.keystore}">
		<dname>
		    <param name="CN" value="${jarsign.vendor}"/>
		    <param name="OU" value="${jarsign.orgunit}"/>
		    <param name="O"  value="${jarsign.org}"/>
		    <param name="C"  value="${jarsign.country}"/>
		  </dname>
	</genkey>
</target>


<!-- sign all the jars in the distrib folder using the generated key -->
<target name="jarsignerNotjar" depends="makekey" description="--> sign all the jars in the ${distrib} folder using the generated key">
		<echo message="[${jarsign.keystorePassword}, ${jarsign.alias}, ${jarsign.mykeyPassword}]"/>
		<signjar keystore="${jarsign.keystore}" storepass="${jarsign.keystorePassword}"
					alias="${jarsign.alias}" keypass="${jarsign.mykeyPassword}"
					maxmemory="512m">
			<fileset dir="${distrib}">
				<include name="*.jar"/>
			</fileset>
		</signjar>
</target>


<!-- make and sign jar files in distrib folder -->
<target name="jarsigner" depends="jar, jarsignerNotjar" description="--> make and sign jar files in ${distrib} folder"/>

	
<!-- clear out existing compiled class and jar files -->
<target name="clean" description="--> clear out existing compiled class and jar files">
  <delete verbose="${verbosity}" includeEmptyDirs="true" quiet="true">
    <fileset dir="${build}"/>
  	<fileset dir="${distrib}"/>
  </delete>
</target>


<!-- make a signed jar from scratch -->
<target name="full" depends="clean, jarsigner" description="--> make a signed jar from scratch"/>


<!-- make and then run a signed jar from scratch -->	
<target name="runjar" depends="full" description="--> make and then run a signed jar from scratch">
    <java jar="${distrib}/${jarFileName}.jar" maxmemory="384m" fork="true" failonerror="true">
        <classpath>
            <pathelement location="${distrib}/${jarFileName}.jar"/>
            <pathelement path="${java.class.path}"/>
        	<fileset refid="libjars"/>
        </classpath>
    </java>
</target>
	
	
	
<!-- zip source files to datestamped zip file -->	
<target name="zipsrc" description="--> zip source (${src}) files to datestamped zip file">
	<tstamp/>
	<zip destfile="${ant.project.name}Src${DSTAMP}.zip">
    	<zipfileset dir="${src}" prefix="src"/>
    	<fileset dir="." includes="*.xml,jarsign.properties"/>
	</zip>
</target>
	
	

<!-- generate docs using doxygen - requires ant-contrib library and doxygen installed -->
<target name="docs" description="--> generate docs using doxygen - requires ant-contrib library and doxygen installed">
        <mkdir dir="${docs}" />
    	<doxygen:doxygen />
</target>
	
	
<!-- make a jnlp file using orangevolt's ant-contrib tasks -->	
<target name="makeJnlp" description="--> make a jnlp file using orangevolt's ant-contrib tasks">
        <taskdef name="jnlp" classname="com.orangevolt.tools.ant.JNLPTask"
            classpath="${ant.home}\ext\orangevolt-ant-tasks-1.3.8\orangevolt-ant-tasks-1.3.8.jar" />
		<taskdef name="if" classname="net.sf.antcontrib.logic.IfTask"
        	classpath="${ant.home}\ext\ant-contrib\ant-contrib-1.0b3.jar" />

        <mkdir dir="${distrib}" />

		<if>
			<equals arg1="${jnlpApplet}" arg2="true"/>
			<then>
				<jnlp 	
					codebase="${jnlpCodebase}"
					spec="1.5+"
					href="${jnlpFilename}"
					toFile="${distrib}/${jnlpFilename}"
				>
					<information>
						<title>${ant.project.name}</title>
						<vendor>${jnlpVendor}</vendor>
						<homepage href="${jnlpCodebase}"/>
						<description kind="one-line">${ant.project.name} - ${jnlpOneLineDescription}</description>
						<offline_allowed/>
						<shortcut>
							<desktop/>
							<menu submenu="JavaApps/${ant.project.name}"/>
						</shortcut>
					</information>
					<security>
						<all_permissions/>
					</security>
					<resources>
						<j2se version="1.6+" initial_heap_size="128m" max_heap_size="512m"/>
						<fileset dir="${distrib}" includes="*.jar"/>
					</resources>
					<applet_desc documentBase="${jnlpCodebase}" name="${ant.project.name}" main_class="${jnlpAppletClass}" width="800" height="600"/>
				</jnlp>
			</then>
			<else>
				<jnlp 	
					codebase="${jnlpCodebase}"
					spec="1.5+"
					href="${jnlpFilename}"
					toFile="${distrib}/${jnlpFilename}"
				>
					<information>
						<title>${ant.project.name}</title>
						<vendor>${jnlpVendor}</vendor>
						<homepage href="${jnlpCodebase}"/>
						<description kind="one-line">${ant.project.name} - ${jnlpOneLineDescription}</description>
						<offline_allowed/>
						<shortcut>
							<desktop/>
							<menu submenu="JavaApps/${ant.project.name}"/>
						</shortcut>
					</information>
					<security>
						<all_permissions/>
					</security>
					<resources>
						<j2se version="1.6+" initial_heap_size="128m" max_heap_size="512m"/>
						<fileset dir="${distrib}" includes="*.jar"/>
					</resources>
					<application_desc main_class="${defaultMainClass}"/>
				</jnlp>
			</else>
		</if>
	
</target>
	
	
	
<!-- retrieve resources listen in ivy.xml from repositories and put in lib folder-->	
<target name="ivyRetrieve" description="--> retrieve dependencies with ivy">
	 <ivy:retrieve pattern="${lib}/([classifier]/)[artifact]-[revision](-[classifier]).[ext]" conf="*"/>
</target>
	
	
	
<target name="ivyPublish" description="--> publish ivy-compatible Pedigree files to repository">
	<delete file="${distrib}/ivy-1.0.xml"/> <!-- forces new file to be generated here -->
	<ivy:resolve/>
	<ivy:publish resolver="libraries" pubrevision="1.0" overwrite="true"
		artifactspattern="${distrib}/[artifact]-[revision](-[classifier]).[ext]">
	</ivy:publish>
</target>
	
	
<target name="ivyZipSrc" description="--> zip source (${src}) files to datestamped zip file">
	<tstamp/>
	<zip destfile="${distrib}/${ant.project.name}-${version}-sources.jar">
    	<zipfileset dir="${src}"/>
    	<fileset dir="." includes="*.xml"/>
	</zip>
</target>
	
	
<target name="fullPublish" depends="jar, ivyZipSrc, ivyPublish" description="--> link together jar making and ivy publishing"/>
	
<target name="echoProperties" description="--> output system properties">
	<echoproperties prefix="ivy."/>
	<echoproperties prefix="user."/>
	<echoproperties prefix="ant."/>
	<echoproperties prefix="java."/>
</target>


</project>
